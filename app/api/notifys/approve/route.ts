import { NextRequest, NextResponse } from "next/server";
import { createClient } from "@/utils/supabase/server";
import webpush from "web-push";

const VAPID_PUBLIC_KEY = process.env.VAPID_PUBLIC_KEY!;
const VAPID_PRIVATE_KEY = process.env.VAPID_PRIVATE_KEY!;

webpush.setVapidDetails(
  "mailto:noreply@asset-satt.com",
  VAPID_PUBLIC_KEY,
  VAPID_PRIVATE_KEY
);

type Status = "approve" | "reject";
export type NotifyPayload = {
  status: "approve" | "reject";
  reason: string;
  borrower: string;
  updated_at: string;
};

function isApprovalStatus(value: unknown): value is Status {
  return value === "approve" || value === "reject";
}

function isApprovalPayload(obj: unknown): obj is NotifyPayload {
  if (typeof obj !== "object" || obj === null) return false;

  const o = obj as Record<string, unknown>;

  return (
    typeof o.status === "string" &&
    isApprovalStatus(o.status) &&
    typeof o.reason === "string" &&
    typeof o.updated_at === "string"
  );
}

export async function POST(req: NextRequest) {
  try {
    const payload = await req.json();

    if (!isApprovalPayload(payload)) {
      return NextResponse.json(
        { error: "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" },
        { status: 400 }
      );
    }
    console.log("üì• Payload ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö:", payload);

    const supabase = await createClient();
    const {
      data: { user },
    } = await supabase.auth.getUser();

    const { data: UserName, error: UserError } = await supabase
      .from("accounts")
      .select("*")
      .eq("id", user?.id)
      .single();

    if (UserError) {
      console.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ:", UserError.message);
      return NextResponse.json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ" }, { status: 404 });
    }

    const { status, reason, updated_at, borrower } = payload;

    const statusText =
      status === "approve" ? "‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß" : "‚ùå ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Ñ‡∏≥‡∏Ç‡∏≠";
    const title = "üîî ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Ñ‡∏≥‡∏Ç‡∏≠";

    const body = `
    üßë‚Äç‚öñÔ∏è ‡πÇ‡∏î‡∏¢: ${UserName.name}
    üìå ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${statusText}
    üìù ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: ${reason ?? "-"}
    üïí ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ${updated_at ?? "-"}
    `.trim();

    // ‡∏î‡∏∂‡∏á subscription ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á borrower
    const { data: subscriptions, error } = await supabase
      .from("subscriptions")
      .select("*")
      .eq("user_id", borrower);

    if (error) {
      console.error("‚ùå ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• subscription ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", error.message);
      return NextResponse.json({ error: error.message }, { status: 500 });
    }

    // ‡∏™‡πà‡∏á notification ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏•‡∏ö subscription ‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (status 410)
    const sendPromises = subscriptions.map(async (sub) => {
      const pushSubscription = {
        endpoint: sub.endpoint,
        keys: sub.keys,
      };

      const notification = {
        title,
        body,
        icon: "/store_1175276.png",
        badge: "/bell.png",
        data: {
          url: "https://asset-management-satt.vercel.app/borrow-items",
        },
      };

      try {
        await webpush.sendNotification(
          pushSubscription,
          JSON.stringify(notification)
        );
        console.log(`‚úÖ ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ñ‡∏∂‡∏á endpoint: ${sub.endpoint}`);
      } catch (err: unknown) {
        if (
          typeof err === "object" &&
          err !== null &&
          "statusCode" in err &&
          typeof (err as { statusCode: number }).statusCode === "number"
        ) {
          const statusCode = (err as { statusCode: number }).statusCode;

          console.warn(`‚ùå ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á ${sub.endpoint} ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:`, err);

          if (statusCode === 410) {
            console.log(`üîÑ Subscription ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‡∏•‡∏ö endpoint: ${sub.endpoint}`);
            const { error: delError } = await supabase
              .from("subscriptions")
              .delete()
              .eq("endpoint", sub.endpoint);

            if (delError) {
              console.error(
                "‚ùå ‡∏•‡∏ö subscription ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:",
                delError.message
              );
            }
          }
        } else {
          console.error("‚ùå Error ‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö:", err);
        }
      }
    });

    await Promise.allSettled(sendPromises);

    return NextResponse.json({ success: true, sentTo: subscriptions.length });
  } catch (error) {
    console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô:", error);
    return NextResponse.json(
      { error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå" },
      { status: 500 }
    );
  }
}
