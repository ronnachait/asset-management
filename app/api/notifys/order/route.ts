import { NextRequest, NextResponse } from "next/server";
import { createClient } from "@/utils/supabase/server";
import webpush from "web-push";

const VAPID_PUBLIC_KEY = process.env.VAPID_PUBLIC_KEY!;
const VAPID_PRIVATE_KEY = process.env.VAPID_PRIVATE_KEY!;

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ VAPID
webpush.setVapidDetails(
  "mailto:noreply@asset-satt.com",
  VAPID_PUBLIC_KEY,
  VAPID_PRIVATE_KEY
);

type Status = "borrow" | "return";

interface Order {
  status: Status;
  borrowed_at?: string;
  returned_at?: string;
  borrower?: string;
  email?: string;
  phone?: string;
  team?: string;
  items_count?: number;
  note?: string;
  updated_at?: string;
}

function isStatus(value: unknown): value is Status {
  return value === "borrow" || value === "return";
}

function isOrder(obj: unknown): obj is Order {
  if (typeof obj !== "object" || obj === null) return false;

  const o = obj as Record<string, unknown>;

  return typeof o.status === "string" && isStatus(o.status);
}

async function processOrder(data: unknown) {
  if (!isOrder(data)) {
    throw new Error("Invalid order data");
  }

  const order = data;

  const statusTextMap: Record<Status, string> = {
    borrow: "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏∑‡∏°",
    return: "‡∏Ñ‡∏∑‡∏ô‡πÅ‡∏•‡πâ‡∏ß",
  };

  const statusText = statusTextMap[order.status];

  const statusDetails =
    order.status === "borrow"
      ? `üìÖ ‡∏¢‡∏∑‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${order.borrowed_at ?? "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}`
      : `üìÖ ‡∏Ñ‡∏∑‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${order.returned_at ?? "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}`;

  const body = [
    "üì¶ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°:",
    `üë§ ‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡∏°: ${order.borrower ?? "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}`,
    `üìß ‡∏≠‡∏µ‡πÄ‡∏°‡∏•: ${order.email ?? "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}`,
    `üì± ‡πÇ‡∏ó‡∏£: ${order.phone ?? "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}`,
    `üë• ‡∏ó‡∏µ‡∏°: ${order.team ?? "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}`,
    statusDetails,
    `üì¶ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏°: ${order.items_count ?? 1} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`,
    `üìå ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${statusText}`,
    `üìù ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ${order.note ?? "-"}`,
    `üïí ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ${order.updated_at ?? "-"}`,
  ].join("\n");

  return body;
}

export async function POST(req: NextRequest) {
  try {
    const { order } = await req.json();

    if (!order) {
      return NextResponse.json(
        { error: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• order ‡∏´‡∏≤‡∏¢‡πÑ‡∏õ" },
        { status: 400 }
      );
    }

    if (!isOrder(order)) {
      return NextResponse.json(
        { error: "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• order ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" },
        { status: 400 }
      );
    }

    const title = "üîî ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå";
    const body = await processOrder(order);

    const supabase = await createClient();

    // ‡∏î‡∏∂‡∏á subscription ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà accessLevel >= 70
    const { data: subscriptions, error } = await supabase
      .from("subscriptions")
      .select("*")
      .gte("accessLevel", 70);

    console.log(subscriptions);
    if (error) {
      console.error("‚ùå ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• subscription ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", error.message);
      return NextResponse.json({ error: error.message }, { status: 500 });
    }

    // ‡∏™‡πà‡∏á push notification ‡πÅ‡∏•‡∏∞‡∏•‡∏ö subscription ‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (status 410)
    const sendPromises = subscriptions.map(async (sub) => {
      const pushSubscription = {
        endpoint: sub.endpoint,
        keys: sub.keys,
      };

      const payload = JSON.stringify({
        title,
        body,
        icon: "/store_1175276.png",
        badge: "/bell.png",
        data: {
          url: "https://asset-management-satt.vercel.app/borrow-orders",
        },
      });

      try {
        await webpush.sendNotification(pushSubscription, payload);
      } catch (err: unknown) {
        console.warn(`‚ùå ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á ${sub.endpoint} ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:`, err);

        // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ statusCode ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô number
        if (
          typeof err === "object" &&
          err !== null &&
          "statusCode" in err &&
          typeof (err as { statusCode: number }).statusCode === "number"
        ) {
          const statusCode = (err as { statusCode: number }).statusCode;

          if (statusCode === 410) {
            console.log(`üîÑ Subscription ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‡∏•‡∏ö endpoint: ${sub.endpoint}`);
            const { error: delError } = await supabase
              .from("subscriptions")
              .delete()
              .eq("endpoint", sub.endpoint);

            if (delError) {
              console.error(
                "‚ùå ‡∏•‡∏ö subscription ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:",
                delError.message
              );
            }
          }
        } else {
          console.error("‚ùå Error ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏¢‡∏Å‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏î‡πâ:", err);
        }
      }
    });

    await Promise.allSettled(sendPromises).then((results) => {
      results.forEach((res, index) => {
        const sub = subscriptions[index];
        if (res.status === "fulfilled") {
          console.log("‚úÖ ‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ñ‡∏∂‡∏á:", sub.endpoint);
        } else {
          console.warn("‚ùå ‡∏™‡πà‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ñ‡∏∂‡∏á:", sub.endpoint, res.reason);
        }
      });
    });

    return NextResponse.json({ success: true, sentTo: subscriptions.length });
  } catch (error) {
    console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô:", error);
    return NextResponse.json(
      { error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå" },
      { status: 500 }
    );
  }
}
